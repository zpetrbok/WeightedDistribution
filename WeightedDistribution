public class WeightedDistribution<T>
{
       private KeyValuePair<int, T>[] _distributionCached;


    public WeightedDistribution(T[] objects, int[] weights)
    {
        SetupWeightedDistribution(objects, weights);
    }

    public WeightedDistribution(List<T> objects, List<int> weights)
    {
        SetupWeightedDistribution(objects.ToArray(), weights.ToArray());
    }

    private void SetupWeightedDistribution(T[] objects, int[] weights)
    {
        if (objects.Length != weights.Length) { Debug.LogError("Item length does not equal weight length!"); return; }

        int weightCount = 0;
        KeyValuePair<int, T> newPair;
        _distributionCached = new KeyValuePair<int, T>[weights.Length];

        // initialize all the pairs and then add them in order
        // increment each pair weight to be + its weight count greater than the previous object
        for (int i = 0; i < weights.Length; i++)
        {
            weightCount += weights[i];
            newPair = new(weightCount, objects[i]);
            _distributionCached[i] = newPair;
        }
    }

    public T GetNewObject()
    {
        // Random.Range is not max inclusive, so the max weight count will always be 1 higher than random.range
        int rng = UnityEngine.Random.Range(0, _distributionCached[_distributionCached.Length - 1].Key);

        for (int i = 0; i < _distributionCached.Length; i++)
        {
            if (_distributionCached[i].Key > rng)
            {
                return _distributionCached[i].Value;
            }
        }

        Debug.LogError("No object found!");

        return default;
    }

    public T[] GetNewObject(int count)
    {
        T[] newObjects = new T[count];

        for (int i = 0; i < count; i++)
        {
            newObjects[i] = GetNewObject();
        }

        return newObjects;
    }
}
